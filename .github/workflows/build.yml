name: Docker Build

on:
    schedule:
        -   cron: 0 0 * * *
    push:
        branches: master
        tags:
            - v*

jobs:
    build:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                php_version: [ 7.2.34, 7.3.24, 7.4.12, 8.0.0RC3, latest ]

        steps:
            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Set up QEMU
                uses: docker/setup-qemu-action@v1
                with:
                    platforms: linux/amd64,linux/386

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v1
                id: buildx
                with:
                    version: latest
                    install: true

            -   name: Available platforms
                run: echo ${{ steps.buildx.outputs.platforms }}

            -   name: Get the version
                id: get_version
                run: |
                    VERSION=${{ matrix.php_version }}
                    PREFIX=edge
                    SUFFIX="-alpine"

                    if [[ $VERSION == "latest" ]]; then
                        SUFFIX=""
                    fi

                    if [[ $GITHUB_REF == refs/tags/* ]]; then
                        PREFIX=latest
                    fi

                    echo ::set-output name=prefix::${PREFIX}
                    echo ::set-output name=suffix::${SUFFIX}
                    echo ::set-output name=minor_version::${VERSION:0:3}
                    echo ::set-output name=full_version::${VERSION}

            -   name: Prepare
                id: prepare
                env:
                    MINOR_PHP_VERSION: ${{ steps.get_version.outputs.minor_version }}
                    FULL_PHP_VERSION: ${{ steps.get_version.outputs.full_version }}
                run: |
                    DOCKER_IMAGE=${GITHUB_REPOSITORY,,}

                    MINOR_VERSION=${MINOR_PHP_VERSION}
                    PATCH_VERSION=${FULL_PHP_VERSION}

                    echo ::set-output name=docker_image::${DOCKER_IMAGE}
                    echo ::set-output name=minor_version::${MINOR_VERSION}
                    echo ::set-output name=patch_version::${PATCH_VERSION}

                    echo ::set-output name=buildx_args_latest::--platform ${{ steps.buildx.outputs.platforms }} \
                        --build-arg VERSION=${{ steps.get_version.outputs.prefix }} \
                        --build-arg MINOR_PHP_VERSION=latest \
                        --build-arg FULL_PHP_VERSION=latest \
                        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                        --build-arg VCS_REF=${GITHUB_SHA::8} \
                        --tag "${DOCKER_IMAGE}:${{ steps.get_version.outputs.prefix }}" .

                    echo ::set-output name=buildx_args_minor::--platform ${{ steps.buildx.outputs.platforms }} \
                        --build-arg VERSION=${{ steps.get_version.outputs.prefix }}-${MINOR_VERSION} \
                        --build-arg MINOR_PHP_VERSION=${MINOR_VERSION} \
                        --build-arg FULL_PHP_VERSION=${MINOR_VERSION}${{ steps.get_version.outputs.suffix }} \
                        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                        --build-arg VCS_REF=${GITHUB_SHA::8} \
                        --tag "${DOCKER_IMAGE}:${{ steps.get_version.outputs.prefix }}-${MINOR_VERSION}" .

                    echo ::set-output name=buildx_args_patch::--platform ${{ steps.buildx.outputs.platforms }} \
                        --build-arg VERSION=${{ steps.get_version.outputs.prefix }}-${PATCH_VERSION} \
                        --build-arg MINOR_PHP_VERSION=${MINOR_VERSION} \
                        --build-arg FULL_PHP_VERSION=${PATCH_VERSION}${{ steps.get_version.outputs.suffix }} \
                        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                        --build-arg VCS_REF=${GITHUB_SHA::8} \
                        --tag "${DOCKER_IMAGE}:${{ steps.get_version.outputs.prefix }}-${PATCH_VERSION}" .

            -   name: Docker Buildx (build latest)
                if: success() && matrix.php_version == 'latest'
                run: docker build --output "type=image,push=false,name=${{ steps.get_version.outputs.prefix }}" ${{ steps.prepare.outputs.buildx_args_latest }}

            -   name: Docker Buildx (build minor tag)
                if: success() && matrix.php_version != 'latest'
                run: docker build --output "type=image,push=false,name=${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.minor_version }}" ${{ steps.prepare.outputs.buildx_args_minor }}

            -   name: Docker Buildx (build patch tag)
                if: success() && matrix.php_version != 'latest'
                run: docker build --output "type=image,push=false,name=${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.patch_version }}" ${{ steps.prepare.outputs.buildx_args_patch }}

            -   name: Login to DockerHub
                if: success()
                uses: docker/login-action@v1
                with:
                    username: ${{ secrets.DOCKER_HUB_USER }}
                    password: ${{ secrets.DOCKER_HUB_PASSWORD }}

            -   name: Docker Buildx (push latest)
                if: success() && matrix.php_version == 'latest'
                run: docker build --output "type=image,push=true,name=${{ steps.get_version.outputs.prefix }}" ${{ steps.prepare.outputs.buildx_args_latest }}

            -   name: Docker Buildx (push minor tag)
                if: success() && matrix.php_version != 'latest'
                run: docker build --output "type=image,push=true,name=${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.minor_version }}" ${{ steps.prepare.outputs.buildx_args_minor }}

            -   name: Docker Buildx (push patch tag)
                if: success() && matrix.php_version != 'latest'
                run: docker build --output "type=image,push=true,name=${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.patch_version }}" ${{ steps.prepare.outputs.buildx_args_patch }}

            -   name: Inspect latest image
                if: success() && matrix.php_version == 'latest'
                run: docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.get_version.outputs.prefix }}

            -   name: Inspect minor tag image
                if: success() && matrix.php_version != 'latest'
                run: docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.minor_version }}

            -   name: Inspect patch tag image
                if: success() && matrix.php_version != 'latest'
                run: docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.patch_version }}
